{
	"title": "SASS: An Overview",
	"style-topics": [
		{
			"name": "Variables",
			"id": "var",
			"code":"<p><pre><code class='language-scss'>$color: #000000;\n$size:1em;\n$boolean:true\n$font:\"Helvetica Neue\", \"Helvetica\", Helvetica, Arial, sans-serif;\n$calculation: darken($color, 15%);\n$cursor: \"crosshair\"</code></pre></p><p><pre><code class='language-scss'>font: $size $font;</code></pre></p>",
			"compiled": "<p>Compiles to:<pre><code class='language-css'>font: 1em \"Helvetica Neue\", \"Helvetica\", Helvetica, Arial, sans-serif;</code></pre></p><p><pre><code class='language-scss'>$style: solid !default;</code></pre>The <b>!default</b> is special to Sass variables. It sets, well, a default value. Foundation uses it quite extensively to better organize user style overrides.</p>"
		},
		{
			"name": "Nesting",
			"id": "nes",
			"code":"<p><pre><code class='language-scss'>div {\n h1 {\n   padding: 2em;\n\n    span {\n      font-weight: normal;\n    }\n\n }\n a {\n   display: none;\n }\n}</code></pre>Sass supports nesting properties of CSS namespaced properties<pre><code class='language-scss'>.myfont {\n    font: {\n    family: Myraid;\n    size: 10px;\n    weight: normal;\n   }\n}</code></pre></p>",
			"compiled": "Compiles to:<pre><code class='language-css'>div h1 { padding: 2em; }\ndiv h1 span { font-weight: normal; }\ndiv a { display: none; }</code></pre><pre><code class='language-css'>.myfont {\n font-family: Myraid;\n font-size: 10px;\n font-weight: normal;\n}</code></pre></p>"
		},
		{
			"name": "Imports",
			"id": "ipt",
			"code":"<p><pre><code class='language-scss'>@import \"lib\";/* file imported and processed */\n\n.class {\n   @import \"lib\";/* file imported to class */\n}\n\n@import \"file1\", \"file2\";/* both file imported and processed */</code></pre></p>To output CSS @import, simply write it in CSS syntax<p><pre><code class='language-scss'>@import url(\"my.css\");</code></pre></p>",
			"compiled": "Compiles to:<pre><code class='language-css'>@import url(\"my.css\");</code></pre></p>"
		},
		{
			"name": "Extend",
			"id": "ext",
			"code":"<p><pre><code class='language-scss'>.mixin {\n color: #000;\n height: 100px; \n}\n.o {\n @extend .mixin;\n width: 100%;\n}</code></pre></p>",
			"compiled": "Compiles to:<pre><code class='language-css'>.mixin, .o {\n color: #000;\n height: 100px;\n}\n.o {\n width: 100%;\n}</code></pre></p>"
		},
		{
			"name": "Mixin",
			"id": "mix",
			"code":"<p><pre><code class='language-scss'>@mixin mybuttonHover ($bgdcolor:#e6e6e6, $fontcolor:#333333) {\n background-color: $bgdcolor;\n color: $fontcolor;\n text-decoration:none;\n background-position: 0 -99px;\n}\na.mybutton:hover {\n @include mybuttonHover();\n}\na.mybutton1:hover {\n @include mybuttonHover(#990000);\n}\na.mybutton2:hover {\n @include mybuttonHover($fontcolor:#000000);\n}\n@mixin box-shadow($shadows...) {\n box-shadow: $shadows;\n -moz-box-shadow: $shadows;\n -webkit-box-shadow: $shadows;\n}\n.myshadow {\n @include box-shadow(1px 2px 1px #000);\n}</code></pre></p>",
			"compiled": "Compiles to:<pre><code class='language-css'>a.mybutton:hover {\n background-color: #e6e6e6;\n color: #333333;\n text-decoration: none;\n background-position: 0 -99px;\n}\na.mybutton1:hover {\n background-color: #990000;\n color: #333333;\n text-decoration: none;\n background-position: 0 -99px;\n}\na.mybutton2:hover {\n background-color: #e6e6e6;\n color: black; /*compiled from hex */\n text-decoration: none;\n background-position: 0 -99px;\n}\n.myshadow {\n box-shadow: 1px 2px 1px black;\n -moz-box-shadow: 1px 2px 1px black;\n -webkit-box-shadow: 1px 2px 1px black;\n}</code></pre></p>"
		},
		{
			"name": "Functions/Operation",
			"id": "fnc",
			"code":"<h4><a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\">Full reference here</a></h4><p>Math calculation such as floor($var). Color manipulation such as lighten($color, 10%), convert HEX to HSL/RGBA, check type, or mix colors together. Surprisingly, Sass has only a few built-in math functions. But <a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#function_directives\">You can also write your own function directives.</a><pre><code class='language-scss'>$c: #990033;\n.box {\n border-color: rgba($c, 0);\n background: mix(#f00, #00f, 25%);\n}\n</code></pre></p><p><pre><code class='language-scss'>@function power ($x, $n) {\n $ret: 1;\n\n @for $i from 1 through $n {\n    $ret: $ret * $x;\n } \n\n @return $ret;\n}\n\n//calculate line-height based on pearsonified.com golden ratio\n@mixin lineht($fontsize, $width, $gr: 1.61803) {\n  line-height: ceil(($gr - (1/(2*$gr))*(1 -($width/(power($fontsize*$gr,2))))) * $fontsize)+px;\n}\np {\n /* width: 1em + 2px; invalid operation*/\n @include lineht(12,600);\n}</code></pre>(Power function from <a href=\"https://github.com/adambom/Sass-Math/blob/master/math.scss\">Sass-Math</a> project)</p>",
			"compiled": "<p>Compiles to:<pre><code class='language-css'>.box {\n border-color: rgba(153, 0, 51, 0);\n background: #3f00bf;\n}</code></pre></p><p><pre><code class='language-css'>p {\n line-height: 22px;\n}</code>Sass, surprisingly, has fewer math operations</pre></p>"
		},
		{
			"name": "Conditionals/Loops",
			"id": "con",
			"code": "<h3><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#control_directives\">Full reference here</a></h3><p>Pretty easy to understand as it uses programming syntax: @if, @else, @for, @each, @while.<pre><code class='language-scss'>@mixin BeforeClass($fp, $fn) {\n@if $fp != null {\n[class^=\"social-icons-#{$fp}-\"]:before,\n [class*=\" social-icons-#{$fp}-\"]:before {\n font-family: $fn;\n}\n} @else {\n font-family: $fn;\n font-size: 1em;\n }\n}</code></pre></p>"
		}
	]
}